/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * stack
 * Serverless Stack
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export interface LoginRequest {
  email: string;
  remember?: boolean;
}

export interface LoginResponse {
  email: string;
  token?: string;
  uuid: string;
}

export type JwkKty = typeof JwkKty[keyof typeof JwkKty];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JwkKty = {
  EC: 'EC',
} as const;

export type JwkCrv = typeof JwkCrv[keyof typeof JwkCrv];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JwkCrv = {
  'P-256': 'P-256',
} as const;

export interface Jwk {
  crv: JwkCrv;
  d?: string;
  kty: JwkKty;
  y: string;
}

export interface JwksResponse {
  keys: Jwk[];
}

export type UserIdentitySchemaAllOf = {
  email?: string | null;
  fullName?: string;
};

export type BaseSchemaAllOf = {
  expires?: number;
  uuid?: string;
};

export interface Keys {
  hashKey: string;
  rangeKey: string;
}

export type BaseSchema = Keys & BaseSchemaAllOf;

export type UserIdentitySchema = BaseSchema & UserIdentitySchemaAllOf;

export type HealthResponseHrefs = {
  api: string;
  openApi: string;
  openApiDocs: string;
};

export interface HealthResponse {
  hrefs: HealthResponseHrefs;
  name: string;
  now: string;
  version: string;
}





  export const health = <TData = AxiosResponse<HealthResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api`,options
    );
  }

export const getIdentity = <TData = AxiosResponse<UserIdentitySchema>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/me`,options
    );
  }

export const getUser = <TData = AxiosResponse<UserIdentitySchema>>(
    uuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users/${uuid}`,options
    );
  }

export const getUsers = <TData = AxiosResponse<UserIdentitySchema[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/users`,options
    );
  }

export const certs = <TData = AxiosResponse<JwksResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/auth`,options
    );
  }

export const login = <TData = AxiosResponse<LoginResponse>>(
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/login`,
      loginRequest,options
    );
  }

export const logout = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/auth/logout`,undefined,options
    );
  }

export type HealthResult = AxiosResponse<HealthResponse>
export type GetIdentityResult = AxiosResponse<UserIdentitySchema>
export type GetUserResult = AxiosResponse<UserIdentitySchema>
export type GetUsersResult = AxiosResponse<UserIdentitySchema[]>
export type CertsResult = AxiosResponse<JwksResponse>
export type LoginResult = AxiosResponse<LoginResponse>
export type LogoutResult = AxiosResponse<void>
