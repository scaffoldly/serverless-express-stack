service: ${file(.serverless/config.js):SERVICE_NAME}

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-offline-resources
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  # deploymentMethod: direct
  iam:
    # deploymentRole: ${file(.serverless/config.js):DEPLOY_ROLE}
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:*'
            - 'secretsmanager:*'
            - 'sns:*'
            - 'sqs:*'
          Resource:
            - { Ref: DefaultTable }
            - { Ref: DefaultSecret }
            - { Ref: DefaultTopic }
            - { Ref: DefaultQueue }
  stage: ${env:NODE_ENV, 'development'}
  logRetentionInDays: 1
  # apiGateway:
  # restApiId: ${file(.serverless/config.js):API_GATEWAY_ID}
  # restApiRootResourceId: ${file(.serverless/config.js):API_GATEWAY_ROOT_ID}
  tracing:
    apiGateway: true
    lambda: true
  environment:
    DEFAULT_QUEUE_URL: { Ref: DefaultQueue }
    DEFAULT_TABLE_NAME: { Ref: DefaultTable }
    DEFAULT_TOPIC_ARN: { Ref: DefaultTopic }
    SERVICE_SLUG: ${file(.serverless/config.js):SERVICE_SLUG}
    API_GATEWAY_DOMAIN: ${file(.serverless/config.js):API_GATEWAY_DOMAIN}
    STAGE_DOMAIN: ${file(.serverless/config.js):STAGE_DOMAIN}
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}

functions:
  app:
    # role: ${file(.serverless/config.js):EXECUTE_ROLE}
    handler: src/app.lambda
    timeout: 30
    events:
      - http:
          path: /
          method: any
      - http:
          path: /
          method: options
      - http:
          path: /{proxy+}
          method: any
      - http:
          path: /{proxy+}
          method: options
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DefaultTable, StreamArn]
      - sqs:
          arn:
            Fn::GetAtt: [DefaultQueue, Arn]
      - sns:
          arn: !Ref DefaultTopic
          topicName: ${self:provider.stage}-${self:service}

resources:
  Resources:
    DefaultSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: lambda/${self:provider.stage}/${self:service}
        SecretString: '${file(.serverless/config.js):appSecrets}'

    DefaultTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stage}-${self:service}

    DefaultQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-${self:service}

    DefaultTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-${self:service}
        KeySchema:
          - AttributeName: hashKey
            KeyType: HASH
          - AttributeName: rangeKey
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: hashKey
            AttributeType: S
          - AttributeName: rangeKey
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: rangeKey-hashKey-index
            KeySchema:
              - AttributeName: rangeKey
                KeyType: HASH
              - AttributeName: hashKey
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: uuid-index
            KeySchema:
              - AttributeName: uuid
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        BillingMode: PAY_PER_REQUEST

custom:
  serverless-offline:
    reloadHandler: true
    useChildProcesses: false
    # noPrependStageInUrl: true
    # prefix: ${file(.serverless/config.js):SERVICE_SLUG}

  bundle:
    copyFiles:
      - from: './src/swagger.html'
        to: './src/swagger.html'
