service: ${file(serverless.config.js):service-name}

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-resource-tagging
  - serverless-offline-resources
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  deploymentMethod: direct
  iam:
    deploymentRole: arn:${env:AWS_PARTITION, ""}:iam::${env:AWS_ACCOUNT_ID, ""}:role/${self:service}-cloudformation
  stage: ${opt:stage, "local"}
  logRetentionInDays: 1
  apiGateway:
    restApiId: ${env:AWS_REST_API_ID, "0000000000"}
    restApiRootResourceId: ${env:AWS_REST_API_ROOT_RESOURCE_ID, "0000000000"}
  tracing:
    lambda: true
  environment:
    DEFAULT_QUEUE_URL: { Ref: DefaultQueue }
    DEFAULT_TABLE_NAME: { Ref: DefaultTable }
    DEFAULT_TOPIC_ARN: { Ref: DefaultTopic }
    SERVICE_SLUG: ${file(serverless.config.js):service-slug}
    API_GATEWAY_DOMAIN: ${file(serverless.config.js):api-gateway-domain}
    STAGE_DOMAIN: ${file(serverless.config.js):stage-domain}
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage, "local"}
  stackTags:
    ServiceName: ${self:service}
    ServiceSlug: ${file(serverless.config.js):service-slug}
    ServiceStage: ${opt:stage, "local"}

functions:
  lambda-handler:
    role: arn:${env:AWS_PARTITION, ""}:iam::${env:AWS_ACCOUNT_ID, ""}:role/${self:service}-${opt:stage, "local"}
    handler: src/lambda.handler
    timeout: 30
    events:
      - http:
          path: /
          method: any
      - http:
          path: /
          method: options
      - http:
          path: /{proxy+}
          method: any
      - http:
          path: /{proxy+}
          method: options
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DefaultTable, StreamArn]
      - sqs:
          arn:
            Fn::GetAtt: [DefaultQueue, Arn]
      - sns:
          arn: !Ref DefaultTopic

resources:
  Resources:
    DefaultSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: lambda/${opt:stage, "local"}/${self:service}
        SecretString: '${file(serverless.config.js):appSecrets}'

    DefaultTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${opt:stage, "local"}-${self:service}

    DefaultQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, "local"}-${self:service}

    DefaultTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, "local"}-${self:service}
        KeySchema:
          - AttributeName: hashKey
            KeyType: HASH
          - AttributeName: rangeKey
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: hashKey
            AttributeType: S
          - AttributeName: rangeKey
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: rangeKey-hashKey-index
            KeySchema:
              - AttributeName: rangeKey
                KeyType: HASH
              - AttributeName: hashKey
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: uuid-index
            KeySchema:
              - AttributeName: uuid
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        BillingMode: PAY_PER_REQUEST

custom:
  serverless-offline:
    reloadHandler: true
    useChildProcesses: false
    noPrependStageInUrl: true
    prefix: ${file(serverless.config.js):service-slug}

  offline-resources:
    stages:
      - local

  bundle:
    externals:
      - tsoa
    copyFiles:
      - from: 'public/*'
        to: './'
