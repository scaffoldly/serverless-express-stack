service: ${file(package.json):name}
useDotenv: true

plugins:
  - serverless-tsoa
  - serverless-esbuild
  - serverless-offline-resources
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:*'
            - 'secretsmanager:*'
            - 'sns:*'
            - 'sqs:*'
            - 's3:*'
          Resource: '*'
  stage: ${opt:stage, 'development'}
  logRetentionInDays: 1
  tracing:
    apiGateway: true
    lambda: true
  # s3:
  #   bucket:
  #     versioningConfiguration:
  #       Status: Enabled
  #     corsConfiguration:
  #       CorsRules:
  #         - Id: GetObjects
  #           MaxAge: 3600
  #           AllowedHeaders: ['*']
  #           AllowedMethods: [GET]
  #           AllowedOrigins: ['*']
  #           ExposedHeaders: [Date, ETag, Content-Disposition]
  environment:
    BUCKET_NAME: ${self:service}-${self:provider.stage}-${aws:accountId}
    QUEUE_URL: { Ref: Queue }
    SECRET_ID: { Ref: Secret }
    TABLE_NAME: { Ref: Table }
    TOPIC_ARN: { Ref: Topic }
    HELLO: ${env:HELLO, 'Hello from Development!'}

functions:
  webapp:
    handler: src/webapp.handler
    timeout: 29
    events:
      - httpApi:
          method: '*'
          path: /{proxy+}
      - sns:
          arn: !Ref Topic
          topicName: ${self:service}-${self:provider.stage}
      # - s3:
      #     bucket: ${self:service}-${self:provider.stage}-${aws:accountId}
      #     event: s3:ObjectCreated:*
      - sqs:
          arn:
            Fn::GetAtt: [Queue, Arn]
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [Table, StreamArn]

resources:
  Resources:
    Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}

    Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}-${self:provider.stage}
        SecretString: ${file(inject-secrets.js):secrets}

    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}
        KeySchema:
          - AttributeName: hashKey
            KeyType: HASH
          - AttributeName: rangeKey
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: hashKey
            AttributeType: S
          - AttributeName: rangeKey
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: rangeKey-hashKey-index
            KeySchema:
              - AttributeName: rangeKey
                KeyType: HASH
              - AttributeName: hashKey
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: uuid-index
            KeySchema:
              - AttributeName: uuid
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        BillingMode: PAY_PER_REQUEST

    Topic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}

custom:
  serverless-offline:
    host: 0.0.0.0
    reloadHandler: true
    useChildProcesses: false

  esbuild:
    bundle: true
    minify: true
    sourcemap: external
    loader:
      .html: text

  tsoa:
    reloadHandler: true
    spec:
      basePath: '/'
      name: ${self:service}
      version: ${file(package.json):version}
      entryFile: src/app.ts
      noImplicitAdditionalProperties: throw-on-extras
      bodyCoercion: true
      controllerPathGlobs: ['src/api/index.ts', 'src/api/*-api.ts']
      outputDirectory: src/lib
      specFileBaseName: 'openapi'
      specVersion: 3
      securityDefinitions:
        jwt:
          type: http
          scheme: bearer
          bearerFormat: JWT
    routes:
      entryFile: src/app.ts
      noImplicitAdditionalProperties: throw-on-extras
      bodyCoercion: true
      controllerPathGlobs: ['src/api/index.ts', 'src/api/*-api.ts']
      routesDir: src/api/express
      authenticationModule: src/api/express/auth.ts
      noWriteIfUnchanged: true
    client:
      override:
        title: Api
      target: src/lib/api.ts
